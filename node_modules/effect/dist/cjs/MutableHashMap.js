"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.size = exports.set = exports.remove = exports.modifyAt = exports.modify = exports.make = exports.has = exports.get = exports.fromIterable = exports.empty = void 0;
var Dual = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Function.js"));
var HashMap = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./HashMap.js"));
var _Inspectable = /*#__PURE__*/require("./Inspectable.js");
var MutableRef = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./MutableRef.js"));
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Option.js"));
var _Pipeable = /*#__PURE__*/require("./Pipeable.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @since 2.0.0
 */

const TypeId = /*#__PURE__*/Symbol.for("effect/MutableHashMap");
const MutableHashMapProto = {
  [TypeId]: TypeId,
  [Symbol.iterator]() {
    return this.backingMap.current[Symbol.iterator]();
  },
  toString() {
    return (0, _Inspectable.toString)(this.toJSON());
  },
  toJSON() {
    return {
      _id: "MutableHashMap",
      values: Array.from(this).map(_Inspectable.toJSON)
    };
  },
  [_Inspectable.NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
};
const fromHashMap = backingMap => {
  const map = Object.create(MutableHashMapProto);
  map.backingMap = MutableRef.make(backingMap);
  return map;
};
/**
 * @since 2.0.0
 * @category constructors
 */
const empty = () => fromHashMap(HashMap.empty());
/**
 * @since 2.0.0
 * @category constructors
 */
exports.empty = empty;
const make = (...entries) => fromIterable(entries);
/**
 * @since 2.0.0
 * @category conversions
 */
exports.make = make;
const fromIterable = entries => fromHashMap(HashMap.fromIterable(entries));
/**
 * @since 2.0.0
 * @category elements
 */
exports.fromIterable = fromIterable;
const get = exports.get = /*#__PURE__*/Dual.dual(2, (self, key) => HashMap.get(self.backingMap.current, key));
/**
 * @since 2.0.0
 * @category elements
 */
const has = exports.has = /*#__PURE__*/Dual.dual(2, (self, key) => Option.isSome(get(self, key)));
/**
 * Updates the value of the specified key within the `MutableHashMap` if it exists.
 *
 * @since 2.0.0
 */
const modify = exports.modify = /*#__PURE__*/Dual.dual(3, (self, key, f) => {
  MutableRef.update(self.backingMap, HashMap.modify(key, f));
  return self;
});
/**
 * Set or remove the specified key in the `MutableHashMap` using the specified
 * update function.
 *
 * @since 2.0.0
 */
const modifyAt = exports.modifyAt = /*#__PURE__*/Dual.dual(3, (self, key, f) => {
  const result = f(get(self, key));
  if (Option.isSome(result)) {
    set(self, key, result.value);
  } else {
    remove(self, key);
  }
  return self;
});
/**
 * @since 2.0.0
 */
const remove = exports.remove = /*#__PURE__*/Dual.dual(2, (self, key) => {
  MutableRef.update(self.backingMap, HashMap.remove(key));
  return self;
});
/**
 * @since 2.0.0
 */
const set = exports.set = /*#__PURE__*/Dual.dual(3, (self, key, value) => {
  MutableRef.update(self.backingMap, HashMap.set(key, value));
  return self;
});
/**
 * @since 2.0.0
 * @category elements
 */
const size = self => HashMap.size(MutableRef.get(self.backingMap));
exports.size = size;
//# sourceMappingURL=MutableHashMap.js.map