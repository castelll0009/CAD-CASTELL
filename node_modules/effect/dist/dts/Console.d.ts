/**
 * @since 2.0.0
 */
import type { Effect } from "./Effect.js";
import type * as Layer from "./Layer.js";
import type { Scope } from "./Scope.js";
/**
 * @since 2.0.0
 * @category type ids
 */
export declare const TypeId: unique symbol;
/**
 * @since 2.0.0
 * @category type ids
 */
export type TypeId = typeof TypeId;
/**
 * @since 2.0.0
 * @category model
 */
export interface Console {
    readonly [TypeId]: TypeId;
    readonly assert: (condition: boolean, ...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly clear: Effect<never, never, void>;
    readonly count: (label?: string) => Effect<never, never, void>;
    readonly countReset: (label?: string) => Effect<never, never, void>;
    readonly debug: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly dir: (item: any, options?: any) => Effect<never, never, void>;
    readonly dirxml: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly error: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly group: (options?: {
        readonly label?: string | undefined;
        readonly collapsed?: boolean | undefined;
    }) => Effect<never, never, void>;
    readonly groupEnd: Effect<never, never, void>;
    readonly info: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly log: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly table: (tabularData: any, properties?: ReadonlyArray<string>) => Effect<never, never, void>;
    readonly time: (label?: string) => Effect<never, never, void>;
    readonly timeEnd: (label?: string) => Effect<never, never, void>;
    readonly timeLog: (label?: string, ...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly trace: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly warn: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
    readonly unsafe: UnsafeConsole;
}
/**
 * @since 2.0.0
 * @category model
 */
export interface UnsafeConsole {
    readonly assert: (condition: boolean, ...args: ReadonlyArray<any>) => void;
    readonly clear: () => void;
    readonly count: (label?: string) => void;
    readonly countReset: (label?: string) => void;
    readonly debug: (...args: ReadonlyArray<any>) => void;
    readonly dir: (item: any, options?: any) => void;
    readonly dirxml: (...args: ReadonlyArray<any>) => void;
    readonly error: (...args: ReadonlyArray<any>) => void;
    readonly group: (options?: {
        readonly label?: string | undefined;
        readonly collapsed?: boolean | undefined;
    }) => void;
    readonly groupEnd: () => void;
    readonly info: (...args: ReadonlyArray<any>) => void;
    readonly log: (...args: ReadonlyArray<any>) => void;
    readonly table: (tabularData: any, properties?: ReadonlyArray<string>) => void;
    readonly time: (label?: string) => void;
    readonly timeEnd: (label?: string) => void;
    readonly timeLog: (label?: string, ...args: ReadonlyArray<any>) => void;
    readonly trace: (...args: ReadonlyArray<any>) => void;
    readonly warn: (...args: ReadonlyArray<any>) => void;
}
/**
 * @since 2.0.0
 * @category default services
 */
export declare const withConsole: {
    <A extends Console>(console: A): <R, E, A>(effect: Effect<R, E, A>) => Effect<R, E, A>;
    <R, E, A extends Console>(effect: Effect<R, E, A>, console: A): Effect<R, E, A>;
};
/**
 * @since 2.0.0
 * @category default services
 */
export declare const setConsole: <A extends Console>(console: A) => Layer.Layer<never, never, never>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const consoleWith: <R, E, A>(f: (console: Console) => Effect<R, E, A>) => Effect<R, E, A>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const assert: (condition: boolean, ...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const clear: Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const count: (label?: string) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const countReset: (label?: string) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const debug: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const dir: (item: any, options?: any) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const dirxml: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const error: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const group: (options?: {
    label?: string | undefined;
    collapsed?: boolean | undefined;
}) => Effect<Scope, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const info: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const log: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const table: (tabularData: any, properties?: ReadonlyArray<string>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const time: (label?: string) => Effect<Scope, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const timeLog: (label?: string, ...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const trace: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const warn: (...args: ReadonlyArray<any>) => Effect<never, never, void>;
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const withGroup: {
    (options?: {
        readonly label?: string | undefined;
        readonly collapsed?: boolean | undefined;
    }): <R, E, A>(self: Effect<R, E, A>) => Effect<R, E, A>;
    <R, E, A>(self: Effect<R, E, A>, options?: {
        readonly label?: string | undefined;
        readonly collapsed?: boolean | undefined;
    }): Effect<R, E, A>;
};
/**
 * @since 2.0.0
 * @category accessor
 */
export declare const withTime: {
    (label?: string): <R, E, A>(self: Effect<R, E, A>) => Effect<R, E, A>;
    <R, E, A>(self: Effect<R, E, A>, label?: string): Effect<R, E, A>;
};
//# sourceMappingURL=Console.d.ts.map